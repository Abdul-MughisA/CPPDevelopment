Copy Initialisation
int var = 1
This is simple to read.

Direct Initialisation
int var(1)

Direct List Initialisation
int var{1}
This is preferred.

Copy List Initialisation
int var = {1}

Value Initialisation
int var {}
Usually initialises to 0.

Initialise values to 0 if you are then going to use them.

Put [[maybe_unused]] before init to prevent errors for unused variables.

' for chars and " for strings.

When values are "initialised" but not assigned, they are given the value currently at that memory location.
Uninitialised variables cause undefined behaviours.

std::cout << "This is a really, really, really, really, really, really, really, "
    "really long line\n"; // one extra indentation for continuation line

void() used for procedures.
int() used for functions returning integers.

Adding parameters to int will pass by value using copy initialisation.

Variables inside int or void are local.

Forward declaration lets you use a function if it has been defined after main.
It can be declared before main by copy-pasting the first line of the function.

When adding multiple files, the compiler needs to be aware of it.
The best solution is to create a new folder for every set of files, and make sure the compiler compiles all the files in a folder.
Forward declaration works here when function is defined in another file.

Anything global goes in the global namespace (which is located outside the main() function).
:: is the scope resolution operator.

using namespace std; can be specified outside main and then you will no longer need to write std:: every time.
This is discouraged.

Preprocessor directives start with # in C++.
#include adds libraries.
#define THING "thing" can be used as a variable within the program.
#define THING (without substitution text)

Header files are used to put declarations in a file which can be used when needed.

Use std::cerr instead of std::cout for printing when checking for errors.
std::cerr is unbuffered.
Can also use preprocessor.
#define ENABLE_DEBUG // comment this code out when you don't want to debug
#ifdef ENABLE_DEBUG
#endif
